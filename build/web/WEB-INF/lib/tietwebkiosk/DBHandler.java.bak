package tietwebkiosk;
import java.sql.*;
import java.util.Properties;
import java.util.Enumeration;
import java.util.Set;
import javax.naming.*;
import javax.sql.*;
import javax.sql.rowset.*;
import com.sun.rowset.CachedRowSetImpl;
public class DBHandler{
  Connection con=null;
  Statement stmt = null;  // Or PreparedStatement if needed
  ResultSet rs = null;
  DataSource ds=null;
  public DBHandler()
  {
    try{
    Context initContext = new InitialContext();
    Context envContext  = (Context)initContext.lookup("java:/comp/env");
    ds = (DataSource)envContext.lookup("jdbc/webkioskdb");
    }catch(Exception e){e.printStackTrace();}
  }


  public DBHandler(Properties props) throws SQLException,
      ClassNotFoundException {
    String password=props.getProperty("password");
    String driverName=props.getProperty("driverName");
    String userName=props.getProperty("userName");
    String dsnSID=props.getProperty("dsnSID");
    String portNumber=props.getProperty("portNumber");
    String serverName=props.getProperty("serverName");
    if(driverName.endsWith("JdbcOdbcDriver")){
      this.con= new DBHandler(dsnSID).con ;

    }else if(driverName.endsWith("OracleDriver")){
      new DBHandler(driverName,serverName,portNumber,dsnSID,userName,password);
    }else if(driverName.endsWith("SQLServerDriver")){
      new DBHandler(driverName,serverName,portNumber,userName,password);

    }

  }
  public DBHandler(String dsn) throws ClassNotFoundException, SQLException {
    Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
    con = DriverManager.getConnection("jdbc:odbc:"+dsn);
  }
  public DBHandler(String driver,String url) throws ClassNotFoundException,
      SQLException {

    Class.forName(driver);
    con=DriverManager.getConnection(url);
  }

  public DBHandler(String driver,String url,String userName,String password) throws
      ClassNotFoundException, SQLException {
    Class.forName(driver);
    con=DriverManager.getConnection(url,userName,password);
  }


  public DBHandler(String driver,String serverName,String port,String SID,String userName,String password) throws
      ClassNotFoundException, SQLException {
    Class.forName(driver);
    String url="jdbc:oracle:thin:@"+serverName+":"+port+":"+SID;
    con=DriverManager.getConnection(url,userName,password);
  }
  public DBHandler(String driver,String serverName,String port,String userName,String password) throws
      ClassNotFoundException, SQLException {
    Class.forName(driver);
    String url="jdbc:microsoft:sqlserver://"+serverName+":"+port+";"+"user="+userName+";"+"password="+password;
    con = DriverManager.getConnection(url);
  }

  public ResultSet execute(String qry) throws SQLException {
    Statement stmt=con.createStatement();
    ResultSet rs=stmt.executeQuery(qry);
    return rs;
  }
  public boolean insert(String qry) throws SQLException {
    Statement stmt=con.createStatement();
    boolean retval=stmt.execute(qry) ;
    return retval;
  }
  public int update(String sql) throws SQLException {
    int retval=0;
    try{
    con=ds.getConnection();
    Statement stmt=con.createStatement();
    retval=stmt.executeUpdate(sql) ;
    stmt.close();
    stmt = null;
    con.close(); // Return to connection pool
    con = null;  // Make sure we don't close it twice
  } catch (SQLException e) {
    e.printStackTrace();
  } finally {
// Always make sure result sets and statements are closed,
// and the connection is returned to the pool

    if (stmt != null) {
      try { stmt.close(); } catch (SQLException e) { e.printStackTrace(); }
      stmt = null;
    }
    if (con != null) {
      try { con.close(); } catch (SQLException e) { e.printStackTrace(); }
      con = null;
    }
  }//end of finally block

  return retval;
    }




    public int insertRow(String sql) throws SQLException {
    int retval=0;
    try{
    con=ds.getConnection();
    Statement stmt=con.createStatement();
    retval=stmt.executeUpdate(sql) ;
    stmt.close();
    stmt = null;
    con.close(); // Return to connection pool
    con = null;  // Make sure we don't close it twice
  } catch (SQLException e) {
    e.printStackTrace();
  } finally {
// Always make sure result sets and statements are closed,
// and the connection is returned to the pool

    if (stmt != null) {
      try { stmt.close(); } catch (SQLException e) { e.printStackTrace(); }
      stmt = null;
    }
    if (con != null) {
      try { con.close(); } catch (SQLException e) { e.printStackTrace(); }
      con = null;
    }
  }//end of finally block

  return retval;
    }



    public boolean insert(Properties props,String tableName) throws SQLException {
      boolean retval=false;
      String cols="";
      String values="";
      String value="";
      Enumeration enum=props.propertyNames();
      while(enum.hasMoreElements()){
        Object key=enum.nextElement();
        value=props.get(key).toString();
        cols+=key.toString();

        if(enum.hasMoreElements()){
          cols=cols+",";
          values+="'"+value+"',";
        }else{
          values+="'"+value+"'";
        }
      }
      String sql="INSERT INTO "+tableName+" ("+cols+") values ("+values+")";
      Statement stmt=con.createStatement();
      retval=stmt.execute(sql);
      return retval;
    }
    public void closeConnection() throws SQLException {
      con.close();
    }
    public ResultSet getRowset(String qry){
      CachedRowSet crs=null;
      try{
        con = ds.getConnection();
        stmt = con.createStatement();
        rs = stmt.executeQuery(qry);
        crs=new CachedRowSetImpl();
        crs.populate(rs);

        rs.close();
        rs = null;
        stmt.close();
        stmt = null;
        con.close(); // Return to connection pool
        con = null;  // Make sure we don't close it twice
      } catch (SQLException e) {
        e.printStackTrace();
      } finally {
        // Always make sure result sets and statements are closed,
        // and the connection is returned to the pool
        if (rs != null) {
          try { rs.close(); } catch (SQLException e) { e.printStackTrace(); }
          rs = null;

        }
        if (stmt != null) {
          try { stmt.close(); } catch (SQLException e) { e.printStackTrace(); }
          stmt = null;
        }
        if (con != null) {
          try { con.close(); } catch (SQLException e) { e.printStackTrace(); }
          con = null;
        }
      }//end of finally block
      return (ResultSet)crs;

    }

//


//----
public void saveLogEntry(String tMemberID , String tMemberType, String tMACAddress , String tIPAddress)
{
   CallableStatement proc=null;
  try{
    con = ds.getConnection();
    proc= con.prepareCall("{call WEBKIOSK.LogEntry(?, ?, ?, ?)}");
    proc.setString(1,tMemberID );
    proc.setString(2, tMemberType);
    proc.setString(3, tMACAddress );
    proc.setString(4, tIPAddress );
    proc.execute();
    proc.close();
    proc = null;
    con.close(); // Return to connection pool
    con = null;  // Make sure we don't close it twice
   }
    catch (SQLException e)
    {
    e.printStackTrace();
    }
finally
{
     if (proc != null)
     {
       try { proc.close(); }
       catch (SQLException e)
       {
           e.printStackTrace();
       }
       proc = null;
     }
     if (con != null)
     {
       try
       { con.close();
       }
       catch (SQLException e)
       { e.printStackTrace();
       }
       con = null;
     }

    }
}
//--



//--

//Procedure MemberSignp(pMemberID in varchar2, pMemberCode in varchar2, pMemberType  IN Varchar2 , pMemberRole IN Varchar2, pPass IN Varchar2)

public void memberSignp(String  pMemberID ,String  pMemberCode , String pMemberType  ,String pMemberRole , String pPass)
{
   CallableStatement proc=null;
  try{
    con = ds.getConnection();
    proc= con.prepareCall("{call WEBKIOSK.MemberSignp(?, ?, ?, ?, ?)}");
    proc.setString(1,pMemberID);
    proc.setString(2, pMemberCode);
    proc.setString(3, pMemberType);
    proc.setString(4, pMemberRole );
    proc.setString(5, pPass );
    proc.execute();
    proc.close();
    proc = null;
    con.close(); // Return to connection pool
    con = null;  // Make sure we don't close it twice
   }
    catch (SQLException e)
    {
    e.printStackTrace();
    }
finally
{
     if (proc != null)
     {
       try { proc.close(); }
       catch (SQLException e)
       {
           e.printStackTrace();
       }
       proc = null;
     }
     if (con != null)
     {
       try
       { con.close();
       }
       catch (SQLException e)
       { e.printStackTrace();
       }
       con = null;
     }

    }
}

//--

//Procedure SaveTransLog(tInstituteCode IN cHAR , tMemberID in varchar2, tMemberType in varchar2, tTransType  IN Varchar2 , tTransDetail IN Varchar2, tMACAddress IN Varchar2, tIPAddress  In Varchar2)
public void saveTransLog(String tInstituteCode, String  tMemberID ,String  tMemberType , String tTransType, String tTransDetail , String tMACAddress , String tIPAddress)
{
   CallableStatement proc=null;
  try{
    con = ds.getConnection();
    proc= con.prepareCall("{call WEBKIOSK.SaveTransLog( ?, ?, ?, ?, ?, ?, ?)}");
    proc.setString(1, tInstituteCode);
    proc.setString(2, tMemberID);
    proc.setString(3, tMemberType);
    proc.setString(4, tTransType);
    proc.setString(5, tTransDetail );
    proc.setString(6, tMACAddress );
    proc.setString(7, tIPAddress );
    proc.execute();
    proc.close();
    proc = null;
    con.close(); // Return to connection pool
    con = null;  // Make sure we don't close it twice
   }
    catch (SQLException e)
    {
    e.printStackTrace();
    }
finally
{
     if (proc != null)
     {
       try { proc.close(); }
       catch (SQLException e)
       {
           e.printStackTrace();
       }
       proc = null;
     }
     if (con != null)
     {
       try
       { con.close();
       }
       catch (SQLException e)
       { e.printStackTrace();
       }
       con = null;
     }

    }
}

//--



//FSTID Generation Procedre
//Procedure GenerateFSTID(pInstCode in Varchar2,mFSTID out varchar2)
public String GenerateFSTID(String pInstCode) 
{
String mRetFSTID="";
   CallableStatement proc=null;
  try{
    con = ds.getConnection();
    proc= con.prepareCall("{call WEBKIOSK.GenerateFSTID( ?, ?)}");
    proc.setString(1, pInstCode);
    proc.registerOutParameter( 2, Types.VARCHAR);
    proc.execute();
    mRetFSTID=proc.getString(2);
    proc.close();
    proc = null;
    con.close(); // Return to connection pool
    con = null;  // Make sure we don't close it twice
   }
    catch (SQLException e)
    {
    e.printStackTrace();
    }
finally
{
     if (proc != null)
     {
       try { proc.close(); }
       catch (SQLException e)
       {
           e.printStackTrace();
       }
       proc = null;
     }
     if (con != null)
     {
       try
       { con.close();
       }
       catch (SQLException e)
       { e.printStackTrace();
       }
       con = null;
     }

    }
return(mRetFSTID);
}



//procedure WeekReg4JSP(AccFdate varchar2,AccTDate varchar2,pUserID Varchar2, pUserType Varchar2,CompCode varchar2, pLoginCardIDTime Varchar2,LWPInclude Char,ODInclude Char,WInclude Char,AbsentInclude Char,LeaveInclude Char,PresentInclude Char, HoliDayInclude Char, VacationInclude Char,InstCode Char,PresentWhenOneSwap IN char :='Y') ;
public void WeekReg4JSP(String AccFdate ,String AccTDate, String pUserID , String pUserType , String CompCode, String pLoginCardIDTime, String LWPInclude ,String ODInclude ,String WInclude ,String AbsentInclude, String LeaveInclude ,String PresentInclude, String HoliDayInclude, String VacationInclude , String InstCode, String PresentWhenOneSwap)
{
   CallableStatement proc=null;
  try{
    con = ds.getConnection();
    proc= con.prepareCall("{call ATTENDANCE.WeekReg4ASP(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)}");
    proc.setString(1,AccFdate);
    proc.setString(2, AccTDate);
	proc.setString(3, pUserID);
	proc.setString(4, pUserType);
    proc.setString(5, CompCode );
	proc.setString(6, pLoginCardIDTime );
	proc.setString(7, LWPInclude );
	proc.setString(8, ODInclude );
	proc.setString(9, WInclude );
	proc.setString(10, AbsentInclude );
	proc.setString(11, LeaveInclude );
	proc.setString(12, PresentInclude );
	proc.setString(13, HoliDayInclude );
	proc.setString(14, VacationInclude );
	proc.setString(15, InstCode );
    proc.setString(16, PresentWhenOneSwap );
    proc.execute();
    proc.close();
    proc = null;
    con.close(); // Return to connection pool
    con = null;  // Make sure we don't close it twice
   }
    catch (SQLException e)
    {
    e.printStackTrace();
    }
finally
{
     if (proc != null)
     {
       try { proc.close(); }
       catch (SQLException e)
       {
           e.printStackTrace();
       }
       proc = null;
     }
     if (con != null)
     {
       try
       { con.close();
       }
       catch (SQLException e)
       { e.printStackTrace();
       }
       con = null;
     }// clsoing of if

    }// clsoing of finnaly
}




//--

//procedure WeekReg4JSPAll(AccFdate varchar2,AccTDate varchar2,pDeptCode Varchar2,CompCode varchar2, pLoginCardIDTime Varchar2,LWPInclude Char,ODInclude Char,WInclude Char,AbsentInclude Char,LeaveInclude Char,PresentInclude Char, HoliDayInclude Char, VacationInclude Char,InstCode Char,PresentWhenOneSwap IN char :='Y') ;
public void WeekReg4JSPAll(String AccFdate ,String AccTDate, String pDeptCode ,String CompCode, String pLoginCardIDTime, String LWPInclude ,String ODInclude ,String WInclude ,String AbsentInclude, String LeaveInclude ,String PresentInclude, String HoliDayInclude, String VacationInclude , String InstCode, String PresentWhenOneSwap)
{
   CallableStatement proc=null;
  try{
    con = ds.getConnection();
    proc= con.prepareCall("{call ATTENDANCE.WeekReg4ASPAll(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)}");
    proc.setString(1,AccFdate);
    proc.setString(2, AccTDate);
	proc.setString(3, pDeptCode);
    proc.setString(4, CompCode );
	proc.setString(5, pLoginCardIDTime );
	proc.setString(6, LWPInclude );
	proc.setString(7, ODInclude );
	proc.setString(8, WInclude );
	proc.setString(9, AbsentInclude );
	proc.setString(10, LeaveInclude );
	proc.setString(11, PresentInclude );
	proc.setString(12, HoliDayInclude );
	proc.setString(13, VacationInclude );
	proc.setString(14, InstCode );
    proc.setString(15, PresentWhenOneSwap );
    proc.execute();
    proc.close();
    proc = null;
    con.close(); // Return to connection pool
    con = null;  // Make sure we don't close it twice
   }
    catch (SQLException e)
    {
    e.printStackTrace();
    }
finally
{
     if (proc != null)
     {
       try { proc.close(); }
       catch (SQLException e)
       {
           e.printStackTrace();
       }
       proc = null;
     }
     if (con != null)
     {
       try
       { con.close();
       }
       catch (SQLException e)
       { e.printStackTrace();
       }
       con = null;
     }// clsoing of if

    }// clsoing of finnaly
}




//Procedure AttSummary(AccFdate varchar2,AccTDate varchar2,CompCode varchar2,InstCode varchar2,pLoginCardIDTime Varchar2,GuestInclude Char,PresentWhenOneSwap IN char :='Y');
public void AttSummary(String AccFdate ,String AccTDate, String CompCode ,String InstCode, String pLoginCardIDTime, String GuestInclude , String PresentWhenOneSwap)
{
   CallableStatement proc=null;
  try{
    con = ds.getConnection();
    proc= con.prepareCall("{call ATTENDANCE.AttSummary(?, ?, ?, ?, ?, ?, ?)}");
    proc.setString(1,AccFdate);
    proc.setString(2, AccTDate);
    proc.setString(3, CompCode );
    proc.setString(4, InstCode );
	proc.setString(5, pLoginCardIDTime );
    proc.setString(6, GuestInclude );
    proc.setString(7, PresentWhenOneSwap );
    proc.execute();
    proc.close();
    proc = null;
    con.close(); // Return to connection pool
    con = null;  // Make sure we don't close it twice
   }
    catch (SQLException e)
    {
    e.printStackTrace();
    }
finally
{
     if (proc != null)
     {
       try { proc.close(); }
       catch (SQLException e)
       {
           e.printStackTrace();
       }
       proc = null;
     }
     if (con != null)
     {
       try
       { con.close();
       }
       catch (SQLException e)
       { e.printStackTrace();
       }
       con = null;
     }// clsoing of if

    }// clsoing of finnaly
}
 




//procedure WeekReg(AccFdate varchar2,AccTDate varchar2,CompCode varchar2, pLoginCardIDTime Varchar2,LWPInclude Char,ODInclude Char,WInclude Char,AbsentInclude Char,LeaveInclude Char,PresentInclude Char, HoliDayInclude Char, VacationInclude Char,InstCode Char, GuestInclude Char,PresentWhenOneSwap IN char :='Y');
public void WeekReg(String AccFdate ,String AccTDate, String CompCode ,String pLoginCardIDTime, String LWPInclude ,String ODInclude ,String WInclude ,String AbsentInclude, String LeaveInclude ,String PresentInclude, String HoliDayInclude, String VacationInclude ,String InstCode, String GuestInclude, String PresentWhenOneSwap)
{
   CallableStatement proc=null;
  try{
    con = ds.getConnection();
    proc= con.prepareCall("{call ATTENDANCE.WeekReg(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)}");
    proc.setString(1,AccFdate);
    proc.setString(2, AccTDate);
    proc.setString(3, CompCode );
    proc.setString(4, pLoginCardIDTime );
    proc.setString(5, LWPInclude );
    proc.setString(6, ODInclude );
    proc.setString(7, WInclude );
	proc.setString(8, AbsentInclude );
	proc.setString(9, LeaveInclude );
	proc.setString(10, PresentInclude );
	proc.setString(11, HoliDayInclude );
	proc.setString(12, VacationInclude );
	proc.setString(13, GuestInclude );
	proc.setString(14, pLoginCardIDTime );
    proc.setString(15, PresentWhenOneSwap );
    proc.execute();
    proc.close();
    proc = null;
    con.close(); // Return to connection pool
    con = null;  // Make sure we don't close it twice
   }
    catch (SQLException e)
    {
    e.printStackTrace();
    }
finally
{
     if (proc != null)
     {
       try { proc.close(); }
       catch (SQLException e)
       {
           e.printStackTrace();
       }
       proc = null;
     }
     if (con != null)
     {
       try
       { con.close();
       }
       catch (SQLException e)
       { e.printStackTrace();
       }
       con = null;
     }// clsoing of if

    }// clsoing of finnaly
}



//RequestID Generation Procedre
//Procedure GenerateFSTID(pInstCode in Varchar2,mFSTID out varchar2)
// Procedure RequestID (pCompanyCode in Char,pInstituteCode in Char,pWfCode in Varchar2)
public String GetRequestID(String pCompanyCode,String pInstituteCode,String pWfCode)
{
String mGetRequestID="";
   CallableStatement proc=null;
  try{
    con = ds.getConnection();
    proc= con.prepareCall("{call WEBKIOSK.RequestID(?, ?, ?, ?)}");
    proc.setString(1, pCompanyCode);
    proc.setString(2, pInstituteCode);
    proc.setString(3, pWfCode);
    proc.registerOutParameter(4, Types.VARCHAR);
    proc.execute();
    mGetRequestID=proc.getString(4);
    proc.close();
    proc = null;
    con.close(); // Return to connection pool
    con = null;  // Make sure we don't close it twice
   }
    catch (SQLException e)
    {
    e.printStackTrace();
    }
finally
{
     if (proc != null)
     {
       try { proc.close(); }
       catch (SQLException e)
       {
           e.printStackTrace();
       }
       proc = null;
     }
     if (con != null)
     {
       try
       { con.close();
       }
       catch (SQLException e)
       { e.printStackTrace();
       }
       con = null;
     }

    }
return(mGetRequestID);
}



}
